1. What do you mean by Multithreading? Why is it important?
Ans:Multithreading means multiple threads and is considered one of the most important features of Java.As
the name suggests,it is the ability of cpu to execute multiple threads independently at the same time but
share the process resources simultaneously.Its main purpose is to provide simultaneous execution of multiple
threads to utilize the CPu time as much as possible. It is a Java feature where one can sub divide the specific
program into two or more threads to make the execution of the program fast and  easy.

2. What are the benefits of using Multithreading?
Ans: There are various benefits of multithreading as given below
# Allow the program to runcontinuously even if a part of it is blocked.
# Improve performance as compared to traditional parallel programs that use multipleprocesses.
# Allows to write effective programs that utilize maximum CPu time
# Improves the responsiveness of complex applications or programs.
# Increase use of CPu resources  and reduce costs of maintenance.
# Saves time and parallelism tasks.
# If an exception occurs in a single thread,it will not affect other threads as threads are independent.
# Less resource-intensive than executing multiple processes at the same time.

3. What is Thread in Java?
we can define threads as a subprocess with lightweight with the smallest unit of processes and also has separate paths of execution. 
These threads use shared memory but they act independently hence if there is an exception in threads that do not affect the working of other threads despite them sharing the same memory. 


4. What are the two ways of implementing thread in Java?
ans:
Thread can be referred to as a lightweight process. Thread uses fewer resources to create and exist in the process; thread shares process resources. The main thread of Java is the thread that is started when the program starts. The slave thread is created as a result of the main thread. This is the last thread to complete execution.

 A thread can programmatically be created by:

Implementing the java.lang.Runnable interface.
Extending the java.lang.Thread class.
You can create threads by implementing the runnable interface and overriding the run() method. Then, you can create a thread object and call the start() method.

Thread Class:

The Thread class provides constructors and methods for creating and operating on threads. The thread extends the Object and implements the Runnable interface.

import java.io.*;
class mythead extends Thread {
	public void run()
	{
		System.out.print("Welcome to GeeksforGeeks.");
	}
	public static void main(String[] args)
	{
		mythread  t = new mythread(); // creating thread
		t.start(); // starting thread
	}
}


// by runnable interface

class Mult implements Runnable{  
public void run(){  
System.out.println("thread is running...");  
}  
  
public static void main(String args[]){  
Multi3 m1=new Multi3();  
Thread t1 =new Thread(m1);   // Using the constructor Thread(Runnable r)  
t1.start();  
 }  
}  


5.What's the difference between thread and process?

S.NO	  Process	                                                                             Thread
1.	Process means any program is in execution.	                                          Thread means a segment of a process.
2.	The process takes more time to terminate.                                            	The thread takes less time to terminate.
3.	It takes more time for creation.	                                                    It takes less time for creation.
4.	It also takes more time for context switching.	                                      It takes less time for context switching.
5.	The process is less efficient in terms of communication.	                            Thread is more efficient in terms of communication.
6. 	Multiprogramming holds the concepts of multi-process.                     	          We don’t need multi programs in action for multiple threads because a single process consists of multiple threads.
7.	The process is isolated.	                                                            Threads share memory.
8.	The process is called the heavyweight process.                                  	    A Thread is lightweight as each thread in a process shares code, data, and resources.
9.	Process switching uses an interface in an operating system.	                         Thread switching does not require calling an operating system and causes an interrupt to the kernel.
10.	If one process is blocked then it will not affect the execution of other processes 	 If a user-level thread is blocked, then all other user-level threads are blocked. 
11.	The process has its own Process Control Block, Stack, and Address Space.	            Thread has Parents’ PCB, its own Thread Control Block, and Stack and common Address space.
12.	Changes to the parent process do not affect child processes.	                         Since all threads of the same process share address space and other resources so any changes to the main thread may affect the behavior of the other threads of the process.
13.	A system call is involved in it.                                                      No system call is involved, it is created using APIs.
14.	The process does not share data with each other.                                     	Threads share data with each other.


6.How can we create daemon threads?

In Java, daemon threads are low-priority threads that run in the background to perform tasks such as garbage collection or provide services to user threads. 
The life of a daemon thread depends on the mercy of user threads, meaning that when all user threads finish their execution, 
the Java Virtual Machine (JVM) automatically terminates the daemon thread.

To put it simply, daemon threads serve user threads by handling background tasks and have no role other than supporting the main execution.

Example of Daemon Thread in Java

Some examples of daemon threads in Java include garbage collection (gc) and finalizer. These threads work silently in the background, performing tasks that support the main execution without interfering with the user’s operations.

Properties of Java Daemon Thread

No Preventing JVM Exit:   Daemon threads cannot prevent the JVM from exiting when all user threads finish their execution. If all user threads complete their tasks, the JVM terminates itself, regardless of whether any daemon threads are running.
Automatic Termination:    If the JVM detects a running daemon thread, it terminates the thread and subsequently shuts it down. The JVM does not check if the daemon thread is actively running; it terminates it regardless.
Low Priority:              Daemon threads have the lowest priority among all threads in Java.Default Nature of Daemon Thread

By default, the main thread is always a non-daemon thread. However, for all other threads, their daemon nature is inherited from their parent thread.
If the parent thread is a daemon, the child thread is also a daemon, and if the parent thread is a non-daemon, the child thread is also a non-daemon.

exaple
// Java program to demonstrate the usage of
// setDaemon() and isDaemon() method.

public class DaemonThread extends Thread
{
	public DaemonThread(String name){
		super(name);
	}

	public void run()
	{
		// Checking whether the thread is Daemon or not
		if(Thread.currentThread().isDaemon())
		{
			System.out.println(getName() + " is Daemon thread");
		}
		
		else
		{
			System.out.println(getName() + " is User thread");
		}
	}
	
	public static void main(String[] args)
	{
	
		DaemonThread t1 = new DaemonThread("t1");
		DaemonThread t2 = new DaemonThread("t2");
		DaemonThread t3 = new DaemonThread("t3");
	
		// Setting user thread t1 to Daemon
		t1.setDaemon(true);
			
		// starting first 2 threads
		t1.start();
		t2.start();

		// Setting user thread t3 to Daemon
		t3.setDaemon(true);
		t3.start();	
	}
}


7.What are the wait() and sleep() methods?

Sleep(): 
This Method is used to pause the execution of current thread for a specified time in Milliseconds. Here, Thread does not lose its ownership of the monitor and resume’s it’s execution

Wait(): 
This method is defined in object class. It tells the calling thread (a.k.a Current Thread) to wait until another thread invoke’s the notify() or notifyAll() method for this object, 
The thread waits until it reobtains the ownership of the monitor and Resume’s Execution.


           Wait()	                                                                             Sleep()
Wait() method belongs to Object class.	                                            Sleep() method belongs to Thread class.
Wait() method releases lock during Synchronization.                               	Sleep() method does not release the lock on object during Synchronization.
Wait() should be called only from Synchronized context.	                            There is no need to call sleep() from Synchronized context.
Wait() is not a static method. 	                                                      Sleep() is a static method. 
Wait() Has Three Overloaded Methods:

wait()  wait(long timeout)   wait(long timeout, int nanos)                          Sleep() Has Two Overloaded Methods:    sleep(long millis)  millis: milliseconds sleep(long millis,int nanos) nanos: Nanoseconds
public final void wait(long timeout)	                                               public static void sleep(long millis) throws Interrupted_Execption



// Java program to demonstrate the difference
// between wait and sleep

class test{

private static Object LOCK = new Object();

public static void main(String[] args)
throws InterruptedException {

	Thread.sleep(1000);

	System.out.println("Thread '" + Thread.currentThread().getName() +
	"' is woken after sleeping for 1 second");

	synchronized (LOCK)
	{
		LOCK.wait(1000);
	
		System.out.println("Object '" + LOCK + "' is woken after" +
		" waiting for 1 second");
	}
}
}

