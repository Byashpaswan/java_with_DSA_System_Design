1. What is Input and Output Stream in Java?

Ans: A stream can be defined as a sequence of data. The InputStream is used to read data from a source and
the outputStream is used for writing data to a destination.

2. What are the methods of OutputStream
ans:
 write() - writes the specified byte to the output streamO
 write(byte[] array) - writes the bytes from the specified array to the output stream
 flush() - forces to write all data present in the output stream to the destination
 close() - closes the output stream

3. What is serialization in Java?

Serialization is a mechanism of converting the state of an object into a byte stream.
Deserialization is the reverse process where the byte stream is used to recreate the actual Java object in memory. This mechanism is used to persist the object. 

The byte stream created is platform independent. So, the object serialized on one platform can be deserialized on a different platform. 
To make a Java object serializable we implement the java.io.Serializable interface. 
The ObjectOutputStream class contains writeObject() method for serializing an Object. 

Advantages of Serialization 

To save/persist state of an object. 
To travel an object across a network.

Points to remember 

1. If a parent class has implemented Serializable interface then child class doesn’t need to implement it but vice-versa is not true. 2. Only non-static data members are saved via Serialization process. 
3. Static data members and transient data members are not saved via Serialization process. So, if you don’t want to save value of a non-static data member then make it transient. 
4. Constructor of object is never called when an object is deserialized. 

// Java code for serialization and deserialization
// of a Java object
import java.io.*;

class Demo implements java.io.Serializable
{
	public int a;
	public String b;

	// Default constructor
	public Demo(int a, String b)
	{
		this.a = a;
		this.b = b;
	}

}

class Test
{
	public static void main(String[] args)
	{
		Demo object = new Demo(1, "geeksforgeeks");
		String filename = "file.ser";
		
		// Serialization
		try
		{
			//Saving of object in a file
			FileOutputStream file = new FileOutputStream(filename);
			ObjectOutputStream out = new ObjectOutputStream(file);
			
			// Method for serialization of object
			out.writeObject(object);
			
			out.close();
			file.close();
			
			System.out.println("Object has been serialized");

		}
		
		catch(IOException ex)
		{
			System.out.println("IOException is caught");
		}


		Demo object1 = null;

		// Deserialization
		try
		{
			// Reading the object from a file
			FileInputStream file = new FileInputStream(filename);
			ObjectInputStream in = new ObjectInputStream(file);
			
			// Method for deserialization of object
			object1 = (Demo)in.readObject();
			
			in.close();
			file.close();
			
			System.out.println("Object has been deserialized ");
			System.out.println("a = " + object1.a);
			System.out.println("b = " + object1.b);
		}
		
		catch(IOException ex)
		{
			System.out.println("IOException is caught");
		}
		
		catch(ClassNotFoundException ex)
		{
			System.out.println("ClassNotFoundException is caught");
		}

	}
}


4. What is the Serializable interface in Java?
Ans:
The Serializable interface in Java is a marker interface that has no methods. It is used to mark classes that
can be serialized, meaning their object instances can be converted into a stream of bytes


5. What is deserialization in Java?
Ans:
Deserialization is the process of converting a stream of bytes back into an object instance. This is done
after an object has been serialized.


6. How is serialization achieved in Java?
Ans:
Serialization is achieved in Java by implementing the Serializable interface. When an object is serialized, its
state is converted into a stream of bytes, which can then be transferred over a network or stored in a file or database.

7. How is deserialization achieved in Java?
Ans: 
Deserialization is achieved in Java by reading a stream of bytes and using them to recreate the original
object instance. This is done by calling the readMbject() method of an MbjectInputStream instance

8. How can you avoid certain member variables of class from getting Serialized?
Ans:
Mark member variables as static or transient, and those member variables will no more be a part of Serialization


9. What classes are available in the Java IO File Classes API?
Ans: The following classes are available in the Java IM API and are important to work with files in Java File
RandomAccessFile
FileInputStream
FileReader
FileMutputStream
FileWriter
