import java.util.Stack;

public class printPreviousgreater {

    static void PreviousGreaterOptimize(int arr[]) {
        int n = arr.length;

        Stack<Integer> st = new Stack<>();   // TC:O(N)
                                              // sp:O(N)

        st.push(arr[0]);

        for (int i = 0; i < n; i++) {
            while (st.isEmpty() == false && st.peek() <= arr[i])
                  st.pop();
            int pg = st.isEmpty() ? -1 : st.peek();
            System.out.print(pg + " ");
            st.add(arr[i]);
        }
    }

    static void printPreviousGreater(int arr[]) {
        int n = arr.length;

        for (int i = 0; i < n; i++) { // tc: O(n^2) sp:O(1)
            int j;
            for (j = i - 1; j >= 0; j--) {
                if (arr[j] > arr[i]) {
                    System.out.print(arr[j] + " ");
                    break;
                }
            }

            if (j == -1)
                System.out.print(-1 + " ");
        }
    }

    public static void main(String[] args) {
        int arr[] = new int[] { 20, 30, 10, 5, 15 };

        // printPreviousGreater(arr);
        PreviousGreaterOptimize(arr);
    }

}
