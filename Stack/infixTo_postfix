import java.util.Stack;

public class infixTo_Postfix {

    static int precedence(char c) {
        if (c == '^')
            return 3;
        else if (c == '*' || c == '/')
            return 2;
        else if (c == '+' || c == '-')
            return 1;
        else if (c == '(')
            return 0;

        else
            return -1;
    }

    public static void main(String[] args) {

        String str = "a+b(c^d-e)^(f+g*h)-i";
        StringBuffer ans = infixTopostFix(str);

        System.out.println("infix to posytfix is :" + ans);
    }

    static StringBuffer infixTopostFix(String str) {

        Stack<Character> st = new Stack<>();
        StringBuffer ans = new StringBuffer("");

        int n = str.length();

        for (int i = 0; i < n; i++) {
            if ((str.charAt(i) >= 'a' && str.charAt(i) <= 'z') || (str.charAt(i) >= '0' && str.charAt(i) <= '9')
                    || (str.charAt(i) >= 'A' && str.charAt(i) <= 'Z'))
                ans = ans.append(str.charAt(i));

            else if (str.charAt(i) == '(')
                st.add(str.charAt(i));

            else if (str.charAt(i) == ')') {
                while (st.isEmpty() == false && st.peek() != '(') {
                    ans = ans.append(st.pop());

                }

                if (!st.empty())
                    st.pop();
            }

            else {
                while ((!st.empty()) && precedence(st.peek()) >= precedence(str.charAt(i))) {
                    ans = ans.append(st.pop());
                }
                st.push(str.charAt(i));

            }
        }

        while (st.isEmpty() == false) {
            ans = ans.append(st.pop());
        }

        return ans;
    }

}
