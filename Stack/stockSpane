import java.util.Stack;

public class stockSpane {
    // TC:O(N)
    // sp:O(N)
    static void spaneCount(int arr[]) {
        int n = arr.length;

        Stack<Integer> st = new Stack<>();
        st.push(0);
        System.out.print(1 + " ");// for first item ke liye always 1 hoga pre closest greater
        for (int i = 1; i < n; i++) {
            // delete all element which is less than or equal to curr
            while (st.isEmpty() == false && arr[st.peek()] <= arr[i]) {

                st.pop();
            }
            // if empty then simply spane=i+1(bc first index start 0)
            // nahi to current index-stak ke top index(jo closest greater hoga)
            int spane = st.isEmpty() ? i + 1 : i - st.peek();
            System.out.print(spane + " ");
            st.push(i); // otherwise push current index into stack
        }
    }

    static void leftSideLessThanOREqualto(int arr[]) {
        int n = arr.length;

        for (int i = 0; i < n; i++) {
            int spane = 1; // TC:O(n^2)

            for (int j = i - 1; j >= 0 && arr[j] <= arr[i]; j--) {
                spane++;
            }

            System.out.print(spane + " ");
        }

    }

    public static void main(String[] args) {
        int arr[] = new int[] { 13, 15, 12, 14, 16, 8, 6, 4, 10, 30 };

        leftSideLessThanOREqualto(arr);
        System.out.println();

        spaneCount(arr);
    }

}
